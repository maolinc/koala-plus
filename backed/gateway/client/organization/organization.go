// Code generated by goctl. DO NOT EDIT.
// Source: koala.proto

package client

import (
	"context"

	"koala/gateway/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AccountListResp          = pb.AccountListResp
	AccountQueryReq          = pb.AccountQueryReq
	AccountReq               = pb.AccountReq
	ApiListResp              = pb.ApiListResp
	ApiQueryReq              = pb.ApiQueryReq
	ApiReq                   = pb.ApiReq
	BoolRep                  = pb.BoolRep
	CreateSysApplicationReq  = pb.CreateSysApplicationReq
	CreateSysApplicationResp = pb.CreateSysApplicationResp
	DeleteSysApplicationReq  = pb.DeleteSysApplicationReq
	DeleteSysApplicationResp = pb.DeleteSysApplicationResp
	DeletesReq               = pb.DeletesReq
	DeptListResp             = pb.DeptListResp
	DeptQueryReq             = pb.DeptQueryReq
	DeptReq                  = pb.DeptReq
	DetailSysApplicationReq  = pb.DetailSysApplicationReq
	DetailSysApplicationResp = pb.DetailSysApplicationResp
	EmptyReq                 = pb.EmptyReq
	EmptyResp                = pb.EmptyResp
	GenerateTokenReq         = pb.GenerateTokenReq
	GenerateTokenResp        = pb.GenerateTokenResp
	GetUserInfoReq           = pb.GetUserInfoReq
	GetUserInfoResp          = pb.GetUserInfoResp
	IdReq                    = pb.IdReq
	IdsResp                  = pb.IdsResp
	LoginReq                 = pb.LoginReq
	LoginResp                = pb.LoginResp
	MenuQueryReq             = pb.MenuQueryReq
	MenuReq                  = pb.MenuReq
	MenusListResp            = pb.MenusListResp
	MenusListResp_MenuMeta   = pb.MenusListResp_MenuMeta
	MenusResp                = pb.MenusResp
	PageBase                 = pb.PageBase
	PlusItem                 = pb.PlusItem
	PolicyReq                = pb.PolicyReq
	PostListResp             = pb.PostListResp
	PostQueryReq             = pb.PostQueryReq
	PostReq                  = pb.PostReq
	QueryReq                 = pb.QueryReq
	RegisterReq              = pb.RegisterReq
	RegisterResp             = pb.RegisterResp
	ResetPasswordReq         = pb.ResetPasswordReq
	RoleBindReq              = pb.RoleBindReq
	RoleListResp             = pb.RoleListResp
	RoleQueryReq             = pb.RoleQueryReq
	RoleReq                  = pb.RoleReq
	RuleResp                 = pb.RuleResp
	RulesReq                 = pb.RulesReq
	SearchBase               = pb.SearchBase
	SearchSysApplicationReq  = pb.SearchSysApplicationReq
	SearchSysApplicationResp = pb.SearchSysApplicationResp
	SysApplicationView       = pb.SysApplicationView
	UpdatePasswordReq        = pb.UpdatePasswordReq
	UpdateSysApplicationReq  = pb.UpdateSysApplicationReq
	UpdateSysApplicationResp = pb.UpdateSysApplicationResp
	User                     = pb.User
	UserPermsVerifyReq       = pb.UserPermsVerifyReq
	UserReq                  = pb.UserReq

	Organization interface {
		CreateSysApplication(ctx context.Context, in *CreateSysApplicationReq, opts ...grpc.CallOption) (*CreateSysApplicationResp, error)
		UpdateSysApplication(ctx context.Context, in *UpdateSysApplicationReq, opts ...grpc.CallOption) (*UpdateSysApplicationResp, error)
		DeleteSysApplication(ctx context.Context, in *DeleteSysApplicationReq, opts ...grpc.CallOption) (*DeleteSysApplicationResp, error)
		DetailSysApplication(ctx context.Context, in *DetailSysApplicationReq, opts ...grpc.CallOption) (*DetailSysApplicationResp, error)
		PageSysApplication(ctx context.Context, in *SearchSysApplicationReq, opts ...grpc.CallOption) (*SearchSysApplicationResp, error)
		CreatePost(ctx context.Context, in *PostReq, opts ...grpc.CallOption) (*EmptyResp, error)
		UpdatePost(ctx context.Context, in *PostReq, opts ...grpc.CallOption) (*EmptyResp, error)
		DeletePost(ctx context.Context, in *DeletesReq, opts ...grpc.CallOption) (*EmptyResp, error)
		PagePost(ctx context.Context, in *PostQueryReq, opts ...grpc.CallOption) (*PostListResp, error)
		CreateRole(ctx context.Context, in *RoleReq, opts ...grpc.CallOption) (*EmptyResp, error)
		UpdateRole(ctx context.Context, in *RoleReq, opts ...grpc.CallOption) (*EmptyResp, error)
		DeleteRole(ctx context.Context, in *DeletesReq, opts ...grpc.CallOption) (*EmptyResp, error)
		PageRole(ctx context.Context, in *RoleQueryReq, opts ...grpc.CallOption) (*RoleListResp, error)
		GetMenuForRole(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*IdsResp, error)
		CreateDept(ctx context.Context, in *DeptReq, opts ...grpc.CallOption) (*EmptyResp, error)
		UpdateDept(ctx context.Context, in *DeptReq, opts ...grpc.CallOption) (*EmptyResp, error)
		DeleteDept(ctx context.Context, in *DeletesReq, opts ...grpc.CallOption) (*EmptyResp, error)
		PageDept(ctx context.Context, in *DeptQueryReq, opts ...grpc.CallOption) (*DeptListResp, error)
		CreateMenu(ctx context.Context, in *MenuReq, opts ...grpc.CallOption) (*EmptyResp, error)
		UpdateMenu(ctx context.Context, in *MenuReq, opts ...grpc.CallOption) (*EmptyResp, error)
		GetMenu(ctx context.Context, in *MenuQueryReq, opts ...grpc.CallOption) (*MenusResp, error)
		DeleteMenus(ctx context.Context, in *DeletesReq, opts ...grpc.CallOption) (*EmptyResp, error)
		GetMenuTree(ctx context.Context, in *MenuQueryReq, opts ...grpc.CallOption) (*MenusResp, error)
		GetUserMenuList(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*MenusResp, error)
		CreateApi(ctx context.Context, in *ApiReq, opts ...grpc.CallOption) (*EmptyResp, error)
		UpdateApi(ctx context.Context, in *ApiReq, opts ...grpc.CallOption) (*EmptyResp, error)
		DeleteApi(ctx context.Context, in *DeletesReq, opts ...grpc.CallOption) (*EmptyResp, error)
		PageApi(ctx context.Context, in *ApiQueryReq, opts ...grpc.CallOption) (*ApiListResp, error)
	}

	defaultOrganization struct {
		cli zrpc.Client
	}
)

func NewOrganization(cli zrpc.Client) Organization {
	return &defaultOrganization{
		cli: cli,
	}
}

func (m *defaultOrganization) CreateSysApplication(ctx context.Context, in *CreateSysApplicationReq, opts ...grpc.CallOption) (*CreateSysApplicationResp, error) {
	client := pb.NewOrganizationClient(m.cli.Conn())
	return client.CreateSysApplication(ctx, in, opts...)
}

func (m *defaultOrganization) UpdateSysApplication(ctx context.Context, in *UpdateSysApplicationReq, opts ...grpc.CallOption) (*UpdateSysApplicationResp, error) {
	client := pb.NewOrganizationClient(m.cli.Conn())
	return client.UpdateSysApplication(ctx, in, opts...)
}

func (m *defaultOrganization) DeleteSysApplication(ctx context.Context, in *DeleteSysApplicationReq, opts ...grpc.CallOption) (*DeleteSysApplicationResp, error) {
	client := pb.NewOrganizationClient(m.cli.Conn())
	return client.DeleteSysApplication(ctx, in, opts...)
}

func (m *defaultOrganization) DetailSysApplication(ctx context.Context, in *DetailSysApplicationReq, opts ...grpc.CallOption) (*DetailSysApplicationResp, error) {
	client := pb.NewOrganizationClient(m.cli.Conn())
	return client.DetailSysApplication(ctx, in, opts...)
}

func (m *defaultOrganization) PageSysApplication(ctx context.Context, in *SearchSysApplicationReq, opts ...grpc.CallOption) (*SearchSysApplicationResp, error) {
	client := pb.NewOrganizationClient(m.cli.Conn())
	return client.PageSysApplication(ctx, in, opts...)
}

func (m *defaultOrganization) CreatePost(ctx context.Context, in *PostReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := pb.NewOrganizationClient(m.cli.Conn())
	return client.CreatePost(ctx, in, opts...)
}

func (m *defaultOrganization) UpdatePost(ctx context.Context, in *PostReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := pb.NewOrganizationClient(m.cli.Conn())
	return client.UpdatePost(ctx, in, opts...)
}

func (m *defaultOrganization) DeletePost(ctx context.Context, in *DeletesReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := pb.NewOrganizationClient(m.cli.Conn())
	return client.DeletePost(ctx, in, opts...)
}

func (m *defaultOrganization) PagePost(ctx context.Context, in *PostQueryReq, opts ...grpc.CallOption) (*PostListResp, error) {
	client := pb.NewOrganizationClient(m.cli.Conn())
	return client.PagePost(ctx, in, opts...)
}

func (m *defaultOrganization) CreateRole(ctx context.Context, in *RoleReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := pb.NewOrganizationClient(m.cli.Conn())
	return client.CreateRole(ctx, in, opts...)
}

func (m *defaultOrganization) UpdateRole(ctx context.Context, in *RoleReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := pb.NewOrganizationClient(m.cli.Conn())
	return client.UpdateRole(ctx, in, opts...)
}

func (m *defaultOrganization) DeleteRole(ctx context.Context, in *DeletesReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := pb.NewOrganizationClient(m.cli.Conn())
	return client.DeleteRole(ctx, in, opts...)
}

func (m *defaultOrganization) PageRole(ctx context.Context, in *RoleQueryReq, opts ...grpc.CallOption) (*RoleListResp, error) {
	client := pb.NewOrganizationClient(m.cli.Conn())
	return client.PageRole(ctx, in, opts...)
}

func (m *defaultOrganization) GetMenuForRole(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*IdsResp, error) {
	client := pb.NewOrganizationClient(m.cli.Conn())
	return client.GetMenuForRole(ctx, in, opts...)
}

func (m *defaultOrganization) CreateDept(ctx context.Context, in *DeptReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := pb.NewOrganizationClient(m.cli.Conn())
	return client.CreateDept(ctx, in, opts...)
}

func (m *defaultOrganization) UpdateDept(ctx context.Context, in *DeptReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := pb.NewOrganizationClient(m.cli.Conn())
	return client.UpdateDept(ctx, in, opts...)
}

func (m *defaultOrganization) DeleteDept(ctx context.Context, in *DeletesReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := pb.NewOrganizationClient(m.cli.Conn())
	return client.DeleteDept(ctx, in, opts...)
}

func (m *defaultOrganization) PageDept(ctx context.Context, in *DeptQueryReq, opts ...grpc.CallOption) (*DeptListResp, error) {
	client := pb.NewOrganizationClient(m.cli.Conn())
	return client.PageDept(ctx, in, opts...)
}

func (m *defaultOrganization) CreateMenu(ctx context.Context, in *MenuReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := pb.NewOrganizationClient(m.cli.Conn())
	return client.CreateMenu(ctx, in, opts...)
}

func (m *defaultOrganization) UpdateMenu(ctx context.Context, in *MenuReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := pb.NewOrganizationClient(m.cli.Conn())
	return client.UpdateMenu(ctx, in, opts...)
}

func (m *defaultOrganization) GetMenu(ctx context.Context, in *MenuQueryReq, opts ...grpc.CallOption) (*MenusResp, error) {
	client := pb.NewOrganizationClient(m.cli.Conn())
	return client.GetMenu(ctx, in, opts...)
}

func (m *defaultOrganization) DeleteMenus(ctx context.Context, in *DeletesReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := pb.NewOrganizationClient(m.cli.Conn())
	return client.DeleteMenus(ctx, in, opts...)
}

func (m *defaultOrganization) GetMenuTree(ctx context.Context, in *MenuQueryReq, opts ...grpc.CallOption) (*MenusResp, error) {
	client := pb.NewOrganizationClient(m.cli.Conn())
	return client.GetMenuTree(ctx, in, opts...)
}

func (m *defaultOrganization) GetUserMenuList(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*MenusResp, error) {
	client := pb.NewOrganizationClient(m.cli.Conn())
	return client.GetUserMenuList(ctx, in, opts...)
}

func (m *defaultOrganization) CreateApi(ctx context.Context, in *ApiReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := pb.NewOrganizationClient(m.cli.Conn())
	return client.CreateApi(ctx, in, opts...)
}

func (m *defaultOrganization) UpdateApi(ctx context.Context, in *ApiReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := pb.NewOrganizationClient(m.cli.Conn())
	return client.UpdateApi(ctx, in, opts...)
}

func (m *defaultOrganization) DeleteApi(ctx context.Context, in *DeletesReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := pb.NewOrganizationClient(m.cli.Conn())
	return client.DeleteApi(ctx, in, opts...)
}

func (m *defaultOrganization) PageApi(ctx context.Context, in *ApiQueryReq, opts ...grpc.CallOption) (*ApiListResp, error) {
	client := pb.NewOrganizationClient(m.cli.Conn())
	return client.PageApi(ctx, in, opts...)
}
