// Code generated by goctl. DO NOT EDIT.
// Source: koala.proto

package server

import (
	"context"

	"koala/gateway/internal/logic/account"
	"koala/gateway/internal/svc"
	"koala/gateway/pb"
)

type AccountServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedAccountServer
}

func NewAccountServer(svcCtx *svc.ServiceContext) *AccountServer {
	return &AccountServer{
		svcCtx: svcCtx,
	}
}

func (s *AccountServer) CreateAccount(ctx context.Context, in *pb.AccountReq) (*pb.EmptyResp, error) {
	l := accountlogic.NewCreateAccountLogic(ctx, s.svcCtx)
	return l.CreateAccount(in)
}

func (s *AccountServer) UpdateAccount(ctx context.Context, in *pb.AccountReq) (*pb.EmptyResp, error) {
	l := accountlogic.NewUpdateAccountLogic(ctx, s.svcCtx)
	return l.UpdateAccount(in)
}

func (s *AccountServer) DeleteAccounts(ctx context.Context, in *pb.DeletesReq) (*pb.EmptyResp, error) {
	l := accountlogic.NewDeleteAccountsLogic(ctx, s.svcCtx)
	return l.DeleteAccounts(in)
}

func (s *AccountServer) PageAccount(ctx context.Context, in *pb.AccountQueryReq) (*pb.AccountListResp, error) {
	l := accountlogic.NewPageAccountLogic(ctx, s.svcCtx)
	return l.PageAccount(in)
}

func (s *AccountServer) UpdatePassword(ctx context.Context, in *pb.UpdatePasswordReq) (*pb.EmptyResp, error) {
	l := accountlogic.NewUpdatePasswordLogic(ctx, s.svcCtx)
	return l.UpdatePassword(in)
}

func (s *AccountServer) ResetPassword(ctx context.Context, in *pb.ResetPasswordReq) (*pb.EmptyResp, error) {
	l := accountlogic.NewResetPasswordLogic(ctx, s.svcCtx)
	return l.ResetPassword(in)
}

func (s *AccountServer) RegisterUser(ctx context.Context, in *pb.RegisterReq) (*pb.RegisterResp, error) {
	l := accountlogic.NewRegisterUserLogic(ctx, s.svcCtx)
	return l.RegisterUser(in)
}

func (s *AccountServer) LoginUser(ctx context.Context, in *pb.LoginReq) (*pb.LoginResp, error) {
	l := accountlogic.NewLoginUserLogic(ctx, s.svcCtx)
	return l.LoginUser(in)
}

func (s *AccountServer) GetUserInfo(ctx context.Context, in *pb.GetUserInfoReq) (*pb.GetUserInfoResp, error) {
	l := accountlogic.NewGetUserInfoLogic(ctx, s.svcCtx)
	return l.GetUserInfo(in)
}

func (s *AccountServer) GenerateToken(ctx context.Context, in *pb.GenerateTokenReq) (*pb.GenerateTokenResp, error) {
	l := accountlogic.NewGenerateTokenLogic(ctx, s.svcCtx)
	return l.GenerateToken(in)
}
